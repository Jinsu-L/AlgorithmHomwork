import java.util.Scanner;

public class Knapsack {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        int n = scan.nextInt();
        int maxWeight = scan.nextInt();
        int[][] items = new int[n][2]; // [0]value, [1]weight
        int[][] opt = new int[n + 1][maxWeight + 1];
        for (int i = 0; i < n; i++) {
            items[i][0] = scan.nextInt(); // value
            items[i][1] = scan.nextInt(); // weight
        }

        boolean[][] updated = new boolean[n + 1][maxWeight + 1];

        for (int i = 0; i < n + 1; i++) {
            for (int w = 0; w < maxWeight + 1; w++) {
                if (i == 0)
                    opt[i][w] = 0;
                else if (items[i - 1][1] > w)
                    opt[i][w] = opt[i - 1][w];
                else {
                    int left = opt[i - 1][w];
                    int right = items[i - 1][0] + opt[i - 1][w - items[i - 1][1]];

                    if (left >= right)
                        opt[i][w] = left;
                    else {
                        opt[i][w] = right;
                        updated[i][w] = true;
                    }
                }
            }
        }

        for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < maxWeight + 1; j++)
                System.out.printf("%-3d ", opt[i][j]);
            System.out.println();
        }

        System.out.printf("\nmax : %d\n", opt[n][maxWeight]);

        System.out.printf("item : ");
        for (int i = n, j = maxWeight; i > 0; i--)
            if (updated[i][j]) {
                System.out.printf("%d ", i);
                j -= items[i - 1][1];
            }

        /*
        input :

        8 104
        350 25
        400 35
        450 45
        20 5
        70 25
        8 3
        5 2
        5 2

        output :

        0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
        0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350
        0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   350 350 350 350 350 350 350 350 350 350 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750
        0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   350 350 350 350 350 350 350 350 350 350 400 400 400 400 400 400 400 400 400 400 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 750 750 750 750 750 750 750 750 750 750 800 800 800 800 800 800 800 800 800 800 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850
        0   0   0   0   0   20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  350 350 350 350 350 370 370 370 370 370 400 400 400 400 400 420 420 420 420 420 450 450 450 450 450 470 470 470 470 470 470 470 470 470 470 750 750 750 750 750 770 770 770 770 770 800 800 800 800 800 820 820 820 820 820 850 850 850 850 850 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870
        0   0   0   0   0   20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  350 350 350 350 350 370 370 370 370 370 400 400 400 400 400 420 420 420 420 420 450 450 450 450 450 470 470 470 470 470 470 470 470 470 470 750 750 750 750 750 770 770 770 770 770 800 800 800 800 800 820 820 820 820 820 850 850 850 850 850 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 890 890 890 890 890
        0   0   0   8   8   20  20  20  28  28  28  28  28  28  28  28  28  28  28  28  28  28  28  28  28  350 350 350 358 358 370 370 370 378 378 400 400 400 408 408 420 420 420 428 428 450 450 450 458 458 470 470 470 478 478 478 478 478 478 478 750 750 750 758 758 770 770 770 778 778 800 800 800 808 808 820 820 820 828 828 850 850 850 858 858 870 870 870 878 878 878 878 878 878 878 878 878 878 878 878 890 890 890 898 898
        0   0   5   8   8   20  20  25  28  28  33  33  33  33  33  33  33  33  33  33  33  33  33  33  33  350 350 355 358 358 370 370 375 378 378 400 400 405 408 408 420 420 425 428 428 450 450 455 458 458 470 470 475 478 478 483 483 483 483 483 750 750 755 758 758 770 770 775 778 778 800 800 805 808 808 820 820 825 828 828 850 850 855 858 858 870 870 875 878 878 883 883 883 883 883 883 883 883 883 883 890 890 895 898 898
        0   0   5   8   10  20  20  25  28  30  33  33  38  38  38  38  38  38  38  38  38  38  38  38  38  350 350 355 358 360 370 370 375 378 380 400 400 405 408 410 420 420 425 428 430 450 450 455 458 460 470 470 475 478 480 483 483 488 488 488 750 750 755 758 760 770 770 775 778 780 800 800 805 808 810 820 820 825 828 830 850 850 855 858 860 870 870 875 878 880 883 883 888 888 888 888 888 888 888 888 890 890 895 898 900

        max : 900
        item : 8 7 5 4 3 1

         */
    }
}